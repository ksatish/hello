{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","startRecording","setState","record","stopRecording","blobToBase64","blob","reader","FileReader","readAsDataURL","Promise","resolve","onloadend","result","onStop","recordedBlob","console","log","blobURL","file","File","type","lastModified","Date","then","res","state","style","display","alignItems","flexDirection","this","className","onData","strokeColor","backgroundColor","onClick","src","controls","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8OAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,eAAiB,WACf,EAAKC,SAAS,CACZC,QAAQ,KAVO,EAcnBC,cAAgB,WACd,EAAKF,SAAS,CACZC,QAAQ,KAhBO,EAwBnBE,aAAe,SAAAC,GACb,IAAMC,EAAS,IAAIC,WAEnB,OADAD,EAAOE,cAAcH,GACd,IAAII,SAAQ,SAAAC,GACjBJ,EAAOK,UAAY,WACjBD,EAAQJ,EAAOM,aA7BF,EAkCnBC,OAAS,SAACC,GACRC,QAAQC,IAAI,oBAAqBF,EAAaT,MAC9CU,QAAQC,IAAI,oBAAqBF,EAAaG,SAE9C,IAAIC,EAAO,IAAIC,KAAK,CAACL,GAAe,oBAAqB,CAAEM,KAAMN,EAAaT,KAAKe,KAAMC,aAAc,IAAIC,OAC3GP,QAAQC,IAAI,UAAWE,GAEvB,EAAKd,aAAaU,EAAaT,MAAMkB,MAAK,SAAAC,GAExCT,QAAQC,IAAIQ,MAEd,EAAKvB,SAAS,CACZgB,QAASH,EAAaG,WA5CxB,EAAKQ,MAAQ,CACXvB,QAAQ,EACRe,QAAS,IAJM,E,mDAoBZH,M,+BA+BL,OACE,yBACEY,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,cAAe,WAGjB,kBAAC,IAAD,CACE3B,OAAQ4B,KAAKL,MAAMvB,OACnB6B,UAAU,aACVlB,OAAQiB,KAAKjB,OACbmB,OAAQF,KAAKE,OACbC,YAAY,UACZC,gBAAgB,YAElB,yBAAKR,MAAO,CAACC,QAAQ,SACnB,4BAAQQ,QAASL,KAAK9B,eAAgBoB,KAAK,UAA3C,SAGA,4BAAQe,QAASL,KAAK3B,cAAeiB,KAAK,UAA1C,SAIF,2BAAOgB,IAAKN,KAAKL,MAAMR,QAASoB,SAAS,kB,GA5EhBC,IAAMC,WCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.66018c3a.chunk.js","sourcesContent":["import React from \"react\";\nimport { ReactMic } from \"@cleandersonlobo/react-mic\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: false,\n      blobURL: \"\",\n    };\n  }\n\n  startRecording = () => {\n    this.setState({\n      record: true,\n    });\n  };\n\n  stopRecording = () => {\n    this.setState({\n      record: false,\n    });\n  };\n\n  onData(recordedBlob) {\n    //console.log(\"chunk of real-time data is: \", recordedBlob);\n  }\n  \n  blobToBase64 = blob => {\n    const reader = new FileReader();\n    reader.readAsDataURL(blob);\n    return new Promise(resolve => {\n      reader.onloadend = () => {\n        resolve(reader.result);\n      };\n    });\n  };\n\n  onStop = (recordedBlob) => {\n    console.log(\"recordedBlob is: \", recordedBlob.blob);\n    console.log(\"recordedBlob is: \", recordedBlob.blobURL); \n    //First way to pass data to API\n    var file = new File([recordedBlob], \"recorded_file.wav\", { type: recordedBlob.blob.type, lastModified: new Date() });\n    console.log(\"File : \", file);\n    //Another way by convrting blob to base16\n    this.blobToBase64(recordedBlob.blob).then(res => {\n      // do what you wanna do\n      console.log(res); // res is base64 now\n    });\n    this.setState({\n      blobURL: recordedBlob.blobURL,\n   });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <ReactMic\n          record={this.state.record}\n          className=\"sound-wave\"\n          onStop={this.onStop}\n          onData={this.onData}\n          strokeColor=\"#000000\"\n          backgroundColor=\"#FF4081\"\n        />\n        <div style={{display:\"flex\"}}>\n          <button onClick={this.startRecording} type=\"button\">\n            Start\n          </button>\n          <button onClick={this.stopRecording} type=\"button\">\n            Stop\n          </button>\n        </div>\n        <audio src={this.state.blobURL} controls=\"controls\" />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}